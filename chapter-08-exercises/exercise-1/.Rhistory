# Squares all the numbers in numbers
squared_numbers <- numbers * numbers
# Find the mean of squared_numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Finds the median of squared_numbers
squared_median <- median(squared_numbers)
print(squared_median)
# Finds and prints out all the perfect squares between 1 and 201
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print((perfect_squares))
#################
#### PART 4 #####
#################
# Creates a 'Date' type variable
spring_break <- as.Date("2020-03-21")
# Creates a variable with the current date (local)
today <- Sys.Date()
# Calculates and prints the day left until Spring Break 2020
days_to_break <- spring_break - today
print(days_to_break)
# Change year function
change_year <- function(date_input, year_input){
date_as_string <- as.character(date_input) #Date -> String
return(as.Date(paste(year_input, substr(date_as_string, 5, nchar(date_as_string)),  sep = ""))) # removes first 4 characters, adds new dates
# returns new date as 'Date' object
}
# Test that change_year function is working AND that it returns a 'Date' object
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# A function to see if the date has passed. Takes in one argument 'DATE; (date to be compared) with
# an optional argument that takes in a boolean (default FALSE) when passed TRUE, the year to be compared
# is ignored, but instead checks if the MONTH AND DAY has passed THIS year
date_has_passed <- function(date_input, ignore_year=FALSE){
if(ignore_year == TRUE){
date_ignoring_year <- change_year(date_input, 2020)
return ((Sys.Date() - date_ignoring_year) > 0)
}else{
return ((Sys.Date() - date_input) > 0)
}
}
# Test that date_has_passed function is working properly
print(date_has_passed(as.Date("2022-01-23"), TRUE))
# Create a new list containings birthdays of my immediate family
birthdays <- list(Sam = as.Date("1998-04-02"),
Jerome = as.Date("2006-01-25"),
Mom = as.Date("1979-01-23"),
Dad = as.Date("1977-07-19"))
# Prints out the birthdays list
print(birthdays)
# Takes in a Date argument and returns the next "birthday" year it will happen again. Generalized so this program should still work
# 1 or more years from now and it will return the correct output
get_next_birthday <- function(birthday_input){
integer_birthday_converted <- strtoi(substr(as.character(Sys.Date()), 1, 4)) #converts year into an integer (and generalizes to make any current year work)
current_year_birthday <- change_year(birthday_input, integer_birthday_converted) #converts birthday input into current year's birthday
if(date_has_passed(as.Date(current_year_birthday))){
return(change_year(birthday_input, integer_birthday_converted+1)) #returns the next year's birthday if it has passed, general; works any year
}else{
return(current_year_birthday)
}
}
# Test get_next_birthday function using my birthday
get_next_birthday(birthdays$Sam)
#
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
get_next_birthday(birthdays$Sam)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Egg", "Bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Beef", "Spinach")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a `dinner` element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("rice", "pork")
# Use dollar notation to extract your `dinner` element from your list  and save it in a vector called `dinner``
dinner <- meals$dinner
print(dinner)
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals [[5]] <-meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(Sharks, c("Goblin"))
print(updated_sharks)
updated_sharks <- c(sharks, c("Goblin"))
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(sharks, c("Goblin"))
print(updated_sharks)
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[["is_participant"]] <- "Yes"
print(lab_grades)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1 - sales_tax)
total_with_discount
total_after_tax
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1 + sales_tax)
total_after_tax
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[earthquakes > 6.5]
# Creates a 'Date' type variable
spring_break <- as.Date("2020-03-21")
# Creates a variable with the current date (local)
today <- Sys.Date()
# Calculates and prints the day left until Spring Break 2020
days_to_break <- spring_break - today
print(days_to_break)
# Change year function
change_year <- function(date_input, year_input){
date_as_string <- as.character(date_input) #Date -> String
return(as.Date(paste(year_input, substr(date_as_string, 5, nchar(date_as_string)),  sep = ""))) # removes first 4 characters, adds new dates
# returns new date as 'Date' object
}
# Test that change_year function is working AND that it returns a 'Date' object
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# A function to see if the date has passed. Takes in one argument 'DATE; (date to be compared) with
# an optional argument that takes in a boolean (default FALSE) when passed TRUE, the year to be compared
# is ignored, but instead checks if the MONTH AND DAY has passed THIS year
date_has_passed <- function(date_input, ignore_year=FALSE){
if(ignore_year == TRUE){
date_ignoring_year <- change_year(date_input, 2020)
return ((Sys.Date() - date_ignoring_year) > 0)
}else{
return ((Sys.Date() - date_input) > 0)
}
}
# Test that date_has_passed function is working properly
print(date_has_passed(as.Date("2022-01-23"), TRUE))
# Create a new list containings birthdays of my immediate family
birthdays <- list(Sam = as.Date("1998-04-02"),
Jerome = as.Date("2006-01-25"),
Mom = as.Date("1979-01-23"),
Dad = as.Date("1977-07-19"))
# Prints out the birthdays list
print(birthdays)
# Takes in a Date argument and returns the next "birthday" year it will happen again. Generalized so this program should still work
# 1 or more years from now and it will return the correct output
get_next_birthday <- function(birthday_input){
year_integer_converted <- strtoi(substr(as.character(Sys.Date()), 1, 4)) #converts year into an integer (and generalizes to make any current year work)
current_year_birthday <- change_year(birthday_input, year_integer_converted) #converts birthday input into current year's birthday
if(date_has_passed(as.Date(current_year_birthday))){
return(change_year(birthday_input, (year_integer_converted + 1))) #returns the next year's birthday if it has passed, general; works any year
}else{
return(current_year_birthday)
}
}
# Test get_next_birthday function using my birthday
get_next_birthday(birthdays$Sam)
#
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
# Creates a 'Date' type variable
spring_break <- as.Date("2020-03-21")
# Creates a variable with the current date (local)
today <- Sys.Date()
# Calculates and prints the day left until Spring Break 2020
days_to_break <- spring_break - today
print(days_to_break)
# Change year function
change_year <- function(date_input, year_input){
date_as_string <- as.character(date_input) #Date -> String
return(as.Date(paste(year_input, substr(date_as_string, 5, nchar(date_as_string)),  sep = ""))) # removes first 4 characters, adds new dates
# returns new date as 'Date' object
}
# Test that change_year function is working AND that it returns a 'Date' object
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# A function to see if the date has passed. Takes in one argument 'DATE; (date to be compared) with
# an optional argument that takes in a boolean (default FALSE) when passed TRUE, the year to be compared
# is ignored, but instead checks if the MONTH AND DAY has passed THIS year
date_has_passed <- function(date_input, ignore_year=FALSE){
if(ignore_year == TRUE){
date_ignoring_year <- change_year(date_input, 2020)
return ((Sys.Date() - date_ignoring_year) > 0)
}else{
return ((Sys.Date() - date_input) > 0)
}
}
# Test that date_has_passed function is working properly
print(date_has_passed(as.Date("2022-01-23"), TRUE))
# Create a new list containings birthdays of my immediate family
birthdays <- list(Sam = as.Date("1998-04-02"),
Jerome = as.Date("2006-01-25"),
Mom = as.Date("1979-01-23"),
Dad = as.Date("1977-07-19"))
# Prints out the birthdays list
print(birthdays)
# Takes in a Date argument and returns the next "birthday" year it will happen again. Generalized so this program should still work
# 1 or more years from now and it will return the correct output
get_next_birthday <- function(birthday_input){
year_integer_converted <- strtoi(substr(as.character(Sys.Date()), 1, 4)) #converts year into an integer (and generalizes to make any current year work)
current_year_birthday <- change_year(birthday_input, year_integer_converted) #converts birthday input into current year's birthday
if(date_has_passed(as.Date(current_year_birthday))){
return(change_year(birthday_input, (year_integer_converted + 1))) #returns the next year's birthday if it has passed, general; works any year
}else{
return(current_year_birthday)
}
}
# Test get_next_birthday function using my birthday
get_next_birthday(birthdays$Sam)
#
next_birthdays <- list(lapply(birthdays[[]], get_next_birthday))
print(next_birthdays)
print(salaries_2017)
employees <- paster("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
salaries <- data.frame(emplyees, salaries_2017, adjustments)
View(salaries)
employees <- paster("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000. -10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(emplyees, salaries_2017, adjustments)
View(salaries)
employees <- paster("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000. -10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
View(salaries)
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000. -10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
View(salaries)
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000. 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
View(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$newSalary = newSalary
salaries$salaries_2018 <- salaries$salaries_2017 + adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE])
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments),]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), adjustments]
salaries[salaries$adjustments == max(salaries$adjustments), adjustments]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments),]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactors == FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, "stringAsFactors == FALSE")
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
print(salaries_2017)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57" ,"salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
paycut <-salaries[salaries$got_raise == FALSE,]
mean(paycut$adjustments)
