# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(12, 30, 1))
# Create a vector `all_numbers` by combining the previous two vectors
all_number <- paste(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_number[11]
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(12, 30, 1))
# Create a vector `all_numbers` by combining the previous two vectors
all_number <- paste(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_number[11]
print(eleventh)
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(12, 30, 1))
# Create a vector `all_numbers` by combining the previous two vectors
all_number <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_number[11]
print(eleventh)
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(21, 30, 1))
# Create a vector `all_numbers` by combining the previous two vectors
all_number <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_number[11]
print(eleventh)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- c(seq(21, 30, 1))
# Create a vector `all_numbers` by combining the previous two vectors
all_number <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_number[11]
print(eleventh)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_number[2:5]
print(some_numbers)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(1, 100, 2))
print(even)
even <- c(seq(1, 100, 2) + 1)
print(even)
Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(1, 100, 2) + 1)
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2)
even <- c(seq(1, 100, 2) + 1)
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even
even <- c(seq(1, 100, 2) + 1)
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(1, 100, 2) + 1)
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
if(all(even%%2))
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(seq(1, 100, 2) + 1)
print(even)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
if(all(even%%2)){
print("TRUE")
}
